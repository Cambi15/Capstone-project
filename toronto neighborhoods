from bs4 import BeautifulSoup
import requests
import pandas as pd
List_url = "https://en.wikipedia.org/wiki/List_of_postal_codes_of_Canada:_M"
source = requests.get(List_url).text
soup = BeautifulSoup(source, 'xml')
table=soup.find('table')
column_names = ['Postalcode','Borough','Neighborhood']
df = pd.DataFrame(columns = column_names)
for tr_cell in table.find_all('tr'):
    row_data=[]
    for td_cell in tr_cell.find_all('td'):
        row_data.append(td_cell.text.strip())
    if len(row_data)==3:
        df.loc[len(df)] = row_data
df.head()
Postalcode	Borough	Neighborhood
0	M1A	Not assigned	Not assigned
1	M2A	Not assigned	Not assigned
2	M3A	North York	Parkwoods
3	M4A	North York	Victoria Village
4	M5A	Downtown Toronto	Regent Park, Harbourfront
df=df[df['Borough']!='Not assigned']
df[df['Neighborhood']=='Not assigned']=df['Borough']
df.head()
---------------------------------------------------------------------------
ValueError                                Traceback (most recent call last)
<ipython-input-9-ebb47ef6992f> in <module>
----> 1 df[df['Neighborhood']=='Not assigned']=df['Borough']
      2 df.head()

/opt/conda/envs/Python-3.7-main/lib/python3.7/site-packages/pandas/core/frame.py in __setitem__(self, key, value)
   2933             self._setitem_frame(key, value)
   2934         elif isinstance(key, (Series, np.ndarray, list, Index)):
-> 2935             self._setitem_array(key, value)
   2936         else:
   2937             # set column

/opt/conda/envs/Python-3.7-main/lib/python3.7/site-packages/pandas/core/frame.py in _setitem_array(self, key, value)
   2955             indexer = key.nonzero()[0]
   2956             self._check_setitem_copy()
-> 2957             self.loc._setitem_with_indexer(indexer, value)
   2958         else:
   2959             if isinstance(value, DataFrame):

/opt/conda/envs/Python-3.7-main/lib/python3.7/site-packages/pandas/core/indexing.py in _setitem_with_indexer(self, indexer, value)
   1063             # actually do the set
   1064             self.obj._consolidate_inplace()
-> 1065             self.obj._data = self.obj._data.setitem(indexer=indexer, value=value)
   1066             self.obj._maybe_update_cacher(clear=True)
   1067 

/opt/conda/envs/Python-3.7-main/lib/python3.7/site-packages/pandas/core/internals/managers.py in setitem(self, **kwargs)
    559 
    560     def setitem(self, **kwargs):
--> 561         return self.apply("setitem", **kwargs)
    562 
    563     def putmask(self, **kwargs):

/opt/conda/envs/Python-3.7-main/lib/python3.7/site-packages/pandas/core/internals/managers.py in apply(self, f, filter, **kwargs)
    440                 applied = b.apply(f, **kwargs)
    441             else:
--> 442                 applied = getattr(b, f)(**kwargs)
    443             result_blocks = _extend_blocks(applied, result_blocks)
    444 

/opt/conda/envs/Python-3.7-main/lib/python3.7/site-packages/pandas/core/internals/blocks.py in setitem(self, indexer, value)
    876 
    877         # length checking
--> 878         check_setitem_lengths(indexer, value, values)
    879         exact_match = (
    880             len(arr_value.shape)

/opt/conda/envs/Python-3.7-main/lib/python3.7/site-packages/pandas/core/indexers.py in check_setitem_lengths(indexer, value, values)
    113             ):
    114                 raise ValueError(
--> 115                     "cannot set using a list-like indexer "
    116                     "with a different length than the value"
    117                 )

ValueError: cannot set using a list-like indexer with a different length than the value
temp_df=df.groupby('Postalcode')['Neighborhood'].apply(lambda x: "%s" % ', '.join(x))
temp_df=temp_df.reset_index(drop=False)
temp_df.rename(columns={'Neighborhood':'Neighborhood_joined'},inplace=True)
df_merge = pd.merge(df, temp_df, on='Postalcode')
df_merge.drop(['Neighborhood'],axis=1,inplace=True)
df_merge.drop_duplicates(inplace=True)
df_merge.rename(columns={'Neighborhood_joined':'Neighborhood'},inplace=True)
df_merge.head()
Postalcode	Borough	Neighborhood
0	M3A	North York	Parkwoods
1	M4A	North York	Victoria Village
2	M5A	Downtown Toronto	Regent Park, Harbourfront
3	M6A	North York	Lawrence Manor, Lawrence Heights
4	M7A	Downtown Toronto	Queen's Park, Ontario Provincial Government
df_merge.shape
(103, 3)
import pandas as pd
import requests
from bs4 import BeautifulSoup
List_url = "https://en.wikipedia.org/wiki/List_of_postal_codes_of_Canada:_M"
source = requests.get(List_url).text
soup = BeautifulSoup(source, 'xml')
column_names=['Postalcode','Borough','Neighbourhood']
df = pd.DataFrame(columns=column_names)
for tr_cell in table.find_all('tr'):
    row_data=[]
    for td_cell in tr_cell.find_all('td'):
        row_data.append(td_cell.text.strip())
    if len(row_data)==3:
        df.loc[len(df)] = row_data
df.head()
Postalcode	Borough	Neighbourhood
0	M1A	Not assigned	Not assigned
1	M2A	Not assigned	Not assigned
2	M3A	North York	Parkwoods
3	M4A	North York	Victoria Village
4	M5A	Downtown Toronto	Regent Park, Harbourfront
df=df[df['Borough']!='Not assigned']
df[df['Neighbourhood']=='Not assigned']=df['Borough']
df.head()
---------------------------------------------------------------------------
ValueError                                Traceback (most recent call last)
<ipython-input-24-5d791ec780a5> in <module>
----> 1 df[df['Neighbourhood']=='Not assigned']=df['Borough']
      2 df.head()

/opt/conda/envs/Python-3.7-main/lib/python3.7/site-packages/pandas/core/frame.py in __setitem__(self, key, value)
   2933             self._setitem_frame(key, value)
   2934         elif isinstance(key, (Series, np.ndarray, list, Index)):
-> 2935             self._setitem_array(key, value)
   2936         else:
   2937             # set column

/opt/conda/envs/Python-3.7-main/lib/python3.7/site-packages/pandas/core/frame.py in _setitem_array(self, key, value)
   2955             indexer = key.nonzero()[0]
   2956             self._check_setitem_copy()
-> 2957             self.loc._setitem_with_indexer(indexer, value)
   2958         else:
   2959             if isinstance(value, DataFrame):

/opt/conda/envs/Python-3.7-main/lib/python3.7/site-packages/pandas/core/indexing.py in _setitem_with_indexer(self, indexer, value)
   1063             # actually do the set
   1064             self.obj._consolidate_inplace()
-> 1065             self.obj._data = self.obj._data.setitem(indexer=indexer, value=value)
   1066             self.obj._maybe_update_cacher(clear=True)
   1067 

/opt/conda/envs/Python-3.7-main/lib/python3.7/site-packages/pandas/core/internals/managers.py in setitem(self, **kwargs)
    559 
    560     def setitem(self, **kwargs):
--> 561         return self.apply("setitem", **kwargs)
    562 
    563     def putmask(self, **kwargs):

/opt/conda/envs/Python-3.7-main/lib/python3.7/site-packages/pandas/core/internals/managers.py in apply(self, f, filter, **kwargs)
    440                 applied = b.apply(f, **kwargs)
    441             else:
--> 442                 applied = getattr(b, f)(**kwargs)
    443             result_blocks = _extend_blocks(applied, result_blocks)
    444 

/opt/conda/envs/Python-3.7-main/lib/python3.7/site-packages/pandas/core/internals/blocks.py in setitem(self, indexer, value)
    876 
    877         # length checking
--> 878         check_setitem_lengths(indexer, value, values)
    879         exact_match = (
    880             len(arr_value.shape)

/opt/conda/envs/Python-3.7-main/lib/python3.7/site-packages/pandas/core/indexers.py in check_setitem_lengths(indexer, value, values)
    113             ):
    114                 raise ValueError(
--> 115                     "cannot set using a list-like indexer "
    116                     "with a different length than the value"
    117                 )

ValueError: cannot set using a list-like indexer with a different length than the value
temp_df=df.groupby('Postalcode')['Neighbourhood'].apply(lambda x: "%s" % ', '.join(x))
temp_df=temp_df.reset_index(drop=False)
temp_df.rename(columns={'Neighbourhood':'Neighbourhood_joined'},inplace=True)
df_merge = pd.merge(df, temp_df, on='Postalcode')
df_merge.drop(['Neighbourhood'],axis=1,inplace=True)
df_merge.drop_duplicates(inplace=True)
df_merge.rename(columns={'Neighbourhood_joined':'Neighbourhood'},inplace=True)
df_merge.head()
Postalcode	Borough	Neighbourhood
0	M3A	North York	Parkwoods
1	M4A	North York	Victoria Village
2	M5A	Downtown Toronto	Regent Park, Harbourfront
3	M6A	North York	Lawrence Manor, Lawrence Heights
4	M7A	Downtown Toronto	Queen's Park, Ontario Provincial Government
def get_geocode(postal_code):
    # initialize your variable to None
    lat_lng_coords = None
    while(lat_lng_coords is None):
        g = geocoder.google('{}, Toronto, Ontario'.format(postal_code))
        lat_lng_coords = g.latlng
    latitude = lat_lng_coords[0]
    longitude = lat_lng_coords[1]
    return latitude,longitude
geo_df=pd.read_csv('http://cocl.us/Geospatial_data')
geo_df.head()
Postal Code	Latitude	Longitude
0	M1B	43.806686	-79.194353
1	M1C	43.784535	-79.160497
2	M1E	43.763573	-79.188711
3	M1G	43.770992	-79.216917
4	M1H	43.773136	-79.239476
geo_df.rename(columns={'Postal Code':'Postalcode'},inplace=True)
geo_merged = pd.merge(geo_df, df_merge, on='Postalcode')
geo_data=geo_merged[['Postalcode','Borough','Neighbourhood','Latitude','Longitude']]
geo_data.head()
Postalcode	Borough	Neighbourhood	Latitude	Longitude
0	M1B	Scarborough	Malvern, Rouge	43.806686	-79.194353
1	M1C	Scarborough	Rouge Hill, Port Union, Highland Creek	43.784535	-79.160497
2	M1E	Scarborough	Guildwood, Morningside, West Hill	43.763573	-79.188711
3	M1G	Scarborough	Woburn	43.770992	-79.216917
4	M1H	Scarborough	Cedarbrae	43.773136	-79.239476
import pandas as pd
import numpy as np
import requests
from bs4 import BeautifulSoup
import os
from sklearn.cluster import KMeans
import folium 
from geopy.geocoders import Nominatim 
import matplotlib.cm as cm
import matplotlib.colors as colors


print('Libraries imported.')
Libraries imported.
List_url='https://en.wikipedia.org/wiki/List_of_postal_codes_of_Canada:_M'
source = requests.get(List_url).text
soup = BeautifulSoup(source, 'xml')
table=soup.find('table')
column_names=['Postalcode','Borough','Neighborhood']
df = pd.DataFrame(columns=column_names)
for tr_cell in table.find_all('tr'):
    row_data=[]
    for td_cell in tr_cell.find_all('td'):
        row_data.append(td_cell.text.strip())
    if len(row_data)==3:
        df.loc[len(df)] = row_data
        df.head()
df=df[df['Borough']!='Not assigned']
df[df['Neighborhood']=='Not assigned']=df['Borough']
---------------------------------------------------------------------------
ValueError                                Traceback (most recent call last)
<ipython-input-41-9e253f9463a9> in <module>
----> 1 df[df['Neighborhood']=='Not assigned']=df['Borough']

/opt/conda/envs/Python-3.7-main/lib/python3.7/site-packages/pandas/core/frame.py in __setitem__(self, key, value)
   2933             self._setitem_frame(key, value)
   2934         elif isinstance(key, (Series, np.ndarray, list, Index)):
-> 2935             self._setitem_array(key, value)
   2936         else:
   2937             # set column

/opt/conda/envs/Python-3.7-main/lib/python3.7/site-packages/pandas/core/frame.py in _setitem_array(self, key, value)
   2955             indexer = key.nonzero()[0]
   2956             self._check_setitem_copy()
-> 2957             self.loc._setitem_with_indexer(indexer, value)
   2958         else:
   2959             if isinstance(value, DataFrame):

/opt/conda/envs/Python-3.7-main/lib/python3.7/site-packages/pandas/core/indexing.py in _setitem_with_indexer(self, indexer, value)
   1063             # actually do the set
   1064             self.obj._consolidate_inplace()
-> 1065             self.obj._data = self.obj._data.setitem(indexer=indexer, value=value)
   1066             self.obj._maybe_update_cacher(clear=True)
   1067 

/opt/conda/envs/Python-3.7-main/lib/python3.7/site-packages/pandas/core/internals/managers.py in setitem(self, **kwargs)
    559 
    560     def setitem(self, **kwargs):
--> 561         return self.apply("setitem", **kwargs)
    562 
    563     def putmask(self, **kwargs):

/opt/conda/envs/Python-3.7-main/lib/python3.7/site-packages/pandas/core/internals/managers.py in apply(self, f, filter, **kwargs)
    440                 applied = b.apply(f, **kwargs)
    441             else:
--> 442                 applied = getattr(b, f)(**kwargs)
    443             result_blocks = _extend_blocks(applied, result_blocks)
    444 

/opt/conda/envs/Python-3.7-main/lib/python3.7/site-packages/pandas/core/internals/blocks.py in setitem(self, indexer, value)
    876 
    877         # length checking
--> 878         check_setitem_lengths(indexer, value, values)
    879         exact_match = (
    880             len(arr_value.shape)

/opt/conda/envs/Python-3.7-main/lib/python3.7/site-packages/pandas/core/indexers.py in check_setitem_lengths(indexer, value, values)
    113             ):
    114                 raise ValueError(
--> 115                     "cannot set using a list-like indexer "
    116                     "with a different length than the value"
    117                 )

ValueError: cannot set using a list-like indexer with a different length than the value
df.head()
Postalcode	Borough	Neighborhood
2	M3A	North York	Parkwoods
3	M4A	North York	Victoria Village
4	M5A	Downtown Toronto	Regent Park, Harbourfront
5	M6A	North York	Lawrence Manor, Lawrence Heights
6	M7A	Downtown Toronto	Queen's Park, Ontario Provincial Government
temp_df=df.groupby('Postalcode')['Neighborhood'].apply(lambda x: "%s" % ', '.join(x))
temp_df=temp_df.reset_index(drop=False)
temp_df.rename(columns={'Neighborhood':'Neighborhood_joined'},inplace=True)
df_merge = pd.merge(df, temp_df, on='Postalcode')
df_merge.drop(['Neighborhood'],axis=1,inplace=True)
df_merge.drop_duplicates(inplace=True)
df_merge.rename(columns={'Neighborhood_joined':'Neighborhood'},inplace=True)
df_merge.head()
Postalcode	Borough	Neighborhood
0	M3A	North York	Parkwoods
1	M4A	North York	Victoria Village
2	M5A	Downtown Toronto	Regent Park, Harbourfront
3	M6A	North York	Lawrence Manor, Lawrence Heights
4	M7A	Downtown Toronto	Queen's Park, Ontario Provincial Government
df_merge.shape
(103, 3)
def get_geocode(postal_code):
    # initialize your variable to None
    lat_lng_coords = None
    while(lat_lng_coords is None):
        g = geocoder.google('{}, Toronto, Ontario'.format(postal_code))
        lat_lng_coords = g.latlng
    latitude = lat_lng_coords[0]
    longitude = lat_lng_coords[1]
    return latitude,longitude
geo_df=pd.read_csv('http://cocl.us/Geospatial_data')
geo_df.head()
Postal Code	Latitude	Longitude
0	M1B	43.806686	-79.194353
1	M1C	43.784535	-79.160497
2	M1E	43.763573	-79.188711
3	M1G	43.770992	-79.216917
4	M1H	43.773136	-79.239476
geo_df.rename(columns={'Postal Code':'Postalcode'},inplace=True)
geo_merged = pd.merge(geo_df, df_merge, on='Postalcode')
geo_merged.head()
Postalcode	Latitude	Longitude	Borough	Neighborhood
0	M1B	43.806686	-79.194353	Scarborough	Malvern, Rouge
1	M1C	43.784535	-79.160497	Scarborough	Rouge Hill, Port Union, Highland Creek
2	M1E	43.763573	-79.188711	Scarborough	Guildwood, Morningside, West Hill
3	M1G	43.770992	-79.216917	Scarborough	Woburn
4	M1H	43.773136	-79.239476	Scarborough	Cedarbrae
geo_data=geo_merged[['Postalcode','Borough','Neighborhood','Latitude','Longitude']]
geo_data.head()
Postalcode	Borough	Neighborhood	Latitude	Longitude
0	M1B	Scarborough	Malvern, Rouge	43.806686	-79.194353
1	M1C	Scarborough	Rouge Hill, Port Union, Highland Creek	43.784535	-79.160497
2	M1E	Scarborough	Guildwood, Morningside, West Hill	43.763573	-79.188711
3	M1G	Scarborough	Woburn	43.770992	-79.216917
4	M1H	Scarborough	Cedarbrae	43.773136	-79.239476
toronto_data=geo_data[geo_data['Borough'].str.contains("Toronto")]
toronto_data.head()
Postalcode	Borough	Neighborhood	Latitude	Longitude
37	M4E	East Toronto	The Beaches	43.676357	-79.293031
41	M4K	East Toronto	The Danforth West, Riverdale	43.679557	-79.352188
42	M4L	East Toronto	India Bazaar, The Beaches West	43.668999	-79.315572
43	M4M	East Toronto	Studio District	43.659526	-79.340923
44	M4N	Central Toronto	Lawrence Park	43.728020	-79.388790
CLIENT_ID = 'QEF4SFROUUVOQKNPAFNNRDUW4ACAWSYYG312LM3BKEDDKPIZ' # your Foursquare ID
CLIENT_SECRET = 'CCBFW1WDVTUYDLPFX3SR0QBB5R2UKRYOZ3F1JDJ3PLQMPDRM' # your Foursquare Secret
VERSION = '20180604'
def getNearbyVenues(names, latitudes, longitudes):
    radius=500
    LIMIT=100
    venues_list=[]
    for name, lat, lng in zip(names, latitudes, longitudes):
        print(name)
            
        # create the API request URL
        url = 'https://api.foursquare.com/v2/venues/explore?&client_id={}&client_secret={}&v={}&ll={},{}&radius={}&limit={}'.format(
            CLIENT_ID, 
            CLIENT_SECRET, 
            VERSION, 
            lat, 
            lng, 
            radius, 
            LIMIT)
            
        # make the GET request
        results = requests.get(url).json()["response"]['groups'][0]['items']
        
        # return only relevant information for each nearby venue
        venues_list.append([(
            name, 
            lat, 
            lng, 
            v['venue']['name'], 
            v['venue']['location']['lat'], 
            v['venue']['location']['lng'],  
            v['venue']['categories'][0]['name']) for v in results])

    nearby_venues = pd.DataFrame([item for venue_list in venues_list for item in venue_list])
    nearby_venues.columns = ['Neighborhood', 
                  'Neighborhood Latitude', 
                  'Neighborhood Longitude', 
                  'Venue', 
                  'Venue Latitude', 
                  'Venue Longitude', 
                  'Venue Category']
    
    return(nearby_venues)
toronto_venues = getNearbyVenues(names=toronto_data['Neighborhood'],
                                   latitudes=toronto_data['Latitude'],
                                   longitudes=toronto_data['Longitude']
                                  )
The Beaches
The Danforth West, Riverdale
India Bazaar, The Beaches West
Studio District
Lawrence Park
Davisville North
North Toronto West,  Lawrence Park
Davisville
Moore Park, Summerhill East
Summerhill West, Rathnelly, South Hill, Forest Hill SE, Deer Park
Rosedale
St. James Town, Cabbagetown
Church and Wellesley
Regent Park, Harbourfront
Garden District, Ryerson
St. James Town
Berczy Park
Central Bay Street
Richmond, Adelaide, King
Harbourfront East, Union Station, Toronto Islands
Toronto Dominion Centre, Design Exchange
Commerce Court, Victoria Hotel
Roselawn
Forest Hill North & West, Forest Hill Road Park
The Annex, North Midtown, Yorkville
University of Toronto, Harbord
Kensington Market, Chinatown, Grange Park
CN Tower, King and Spadina, Railway Lands, Harbourfront West, Bathurst Quay, South Niagara, Island airport
Stn A PO Boxes
First Canadian Place, Underground city
Christie
Dufferin, Dovercourt Village
Little Portugal, Trinity
Brockton, Parkdale Village, Exhibition Place
High Park, The Junction South
Parkdale, Roncesvalles
Runnymede, Swansea
Queen's Park, Ontario Provincial Government
Business reply mail Processing Centre, South Central Letter Processing Plant Toronto
toronto_venues.head()
Neighborhood	Neighborhood Latitude	Neighborhood Longitude	Venue	Venue Latitude	Venue Longitude	Venue Category
0	The Beaches	43.676357	-79.293031	Glen Manor Ravine	43.676821	-79.293942	Trail
1	The Beaches	43.676357	-79.293031	The Big Carrot Natural Food Market	43.678879	-79.297734	Health Food Store
2	The Beaches	43.676357	-79.293031	Grover Pub and Grub	43.679181	-79.297215	Pub
3	The Beaches	43.676357	-79.293031	Upper Beaches	43.680563	-79.292869	Neighborhood
4	The Danforth West, Riverdale	43.679557	-79.352188	MenEssentials	43.677820	-79.351265	Cosmetics Shop
toronto_venues.groupby('Neighborhood').count()
Neighborhood Latitude	Neighborhood Longitude	Venue	Venue Latitude	Venue Longitude	Venue Category
Neighborhood						
Berczy Park	56	56	56	56	56	56
Brockton, Parkdale Village, Exhibition Place	23	23	23	23	23	23
Business reply mail Processing Centre, South Central Letter Processing Plant Toronto	16	16	16	16	16	16
CN Tower, King and Spadina, Railway Lands, Harbourfront West, Bathurst Quay, South Niagara, Island airport	15	15	15	15	15	15
Central Bay Street	60	60	60	60	60	60
Christie	16	16	16	16	16	16
Church and Wellesley	82	82	82	82	82	82
Commerce Court, Victoria Hotel	100	100	100	100	100	100
Davisville	32	32	32	32	32	32
Davisville North	8	8	8	8	8	8
Dufferin, Dovercourt Village	14	14	14	14	14	14
First Canadian Place, Underground city	100	100	100	100	100	100
Forest Hill North & West, Forest Hill Road Park	4	4	4	4	4	4
Garden District, Ryerson	100	100	100	100	100	100
Harbourfront East, Union Station, Toronto Islands	100	100	100	100	100	100
High Park, The Junction South	24	24	24	24	24	24
India Bazaar, The Beaches West	20	20	20	20	20	20
Kensington Market, Chinatown, Grange Park	64	64	64	64	64	64
Lawrence Park	4	4	4	4	4	4
Little Portugal, Trinity	43	43	43	43	43	43
Moore Park, Summerhill East	3	3	3	3	3	3
North Toronto West, Lawrence Park	19	19	19	19	19	19
Parkdale, Roncesvalles	14	14	14	14	14	14
Queen's Park, Ontario Provincial Government	32	32	32	32	32	32
Regent Park, Harbourfront	44	44	44	44	44	44
Richmond, Adelaide, King	92	92	92	92	92	92
Rosedale	4	4	4	4	4	4
Roselawn	3	3	3	3	3	3
Runnymede, Swansea	37	37	37	37	37	37
St. James Town	79	79	79	79	79	79
St. James Town, Cabbagetown	45	45	45	45	45	45
Stn A PO Boxes	98	98	98	98	98	98
Studio District	37	37	37	37	37	37
Summerhill West, Rathnelly, South Hill, Forest Hill SE, Deer Park	14	14	14	14	14	14
The Annex, North Midtown, Yorkville	19	19	19	19	19	19
The Beaches	4	4	4	4	4	4
The Danforth West, Riverdale	42	42	42	42	42	42
Toronto Dominion Centre, Design Exchange	100	100	100	100	100	100
University of Toronto, Harbord	31	31	31	31	31	31
toronto_onehot = pd.get_dummies(toronto_venues[['Venue Category']], prefix="", prefix_sep="")
toronto_onehot.drop(['Neighborhood'],axis=1,inplace=True) 
toronto_onehot.insert(loc=0, column='Neighborhood', value=toronto_venues['Neighborhood'] )
toronto_onehot.shape
(1598, 239)
toronto_grouped = toronto_onehot.groupby('Neighborhood').mean().reset_index()
toronto_grouped.head()
Neighborhood	Adult Boutique	Airport	Airport Food Court	Airport Gate	Airport Lounge	Airport Service	Airport Terminal	American Restaurant	Antique Shop	...	Tibetan Restaurant	Toy / Game Store	Trail	Train Station	Vegetarian / Vegan Restaurant	Video Game Store	Video Store	Vietnamese Restaurant	Wine Bar	Yoga Studio
0	Berczy Park	0.0	0.000000	0.000000	0.000000	0.000000	0.0	0.000000	0.0	0.0	...	0.0	0.0	0.0	0.0	0.017857	0.0	0.000000	0.0	0.000000	0.000000
1	Brockton, Parkdale Village, Exhibition Place	0.0	0.000000	0.000000	0.000000	0.000000	0.0	0.000000	0.0	0.0	...	0.0	0.0	0.0	0.0	0.000000	0.0	0.000000	0.0	0.000000	0.000000
2	Business reply mail Processing Centre, South C...	0.0	0.000000	0.000000	0.000000	0.000000	0.0	0.000000	0.0	0.0	...	0.0	0.0	0.0	0.0	0.000000	0.0	0.000000	0.0	0.000000	0.062500
3	CN Tower, King and Spadina, Railway Lands, Har...	0.0	0.066667	0.066667	0.066667	0.133333	0.2	0.066667	0.0	0.0	...	0.0	0.0	0.0	0.0	0.000000	0.0	0.000000	0.0	0.000000	0.000000
4	Central Bay Street	0.0	0.000000	0.000000	0.000000	0.000000	0.0	0.000000	0.0	0.0	...	0.0	0.0	0.0	0.0	0.016667	0.0	0.016667	0.0	0.016667	0.016667
5 rows × 239 columns

def return_most_common_venues(row, num_top_venues):
    row_categories = row.iloc[1:]
    row_categories_sorted = row_categories.sort_values(ascending=False)
    
    return row_categories_sorted.index.values[0:num_top_venues]
num_top_venues = 10

indicators = ['st', 'nd', 'rd']

# create columns according to number of top venues
columns = ['Neighborhood']
for ind in np.arange(num_top_venues):
    try:
        columns.append('{}{} Most Common Venue'.format(ind+1, indicators[ind]))
    except:
        columns.append('{}th Most Common Venue'.format(ind+1))

# create a new dataframe
neighborhoods_venues_sorted = pd.DataFrame(columns=columns)
neighborhoods_venues_sorted['Neighborhood'] = toronto_grouped['Neighborhood']

for ind in np.arange(toronto_grouped.shape[0]):
    neighborhoods_venues_sorted.iloc[ind, 1:] = return_most_common_venues(toronto_grouped.iloc[ind, :], num_top_venues)

neighborhoods_venues_sorted.head()
Neighborhood	1st Most Common Venue	2nd Most Common Venue	3rd Most Common Venue	4th Most Common Venue	5th Most Common Venue	6th Most Common Venue	7th Most Common Venue	8th Most Common Venue	9th Most Common Venue	10th Most Common Venue
0	Berczy Park	Coffee Shop	Bakery	Cocktail Bar	Farmers Market	Beer Bar	Cheese Shop	Seafood Restaurant	Restaurant	Jazz Club	Fish Market
1	Brockton, Parkdale Village, Exhibition Place	Café	Coffee Shop	Bakery	Breakfast Spot	Gym	Intersection	Furniture / Home Store	Climbing Gym	Restaurant	Nightclub
2	Business reply mail Processing Centre, South C...	Light Rail Station	Yoga Studio	Auto Workshop	Garden Center	Garden	Fast Food Restaurant	Farmers Market	Comic Shop	Pizza Place	Recording Studio
3	CN Tower, King and Spadina, Railway Lands, Har...	Airport Service	Airport Lounge	Harbor / Marina	Airport Terminal	Coffee Shop	Boat or Ferry	Sculpture Garden	Plane	Airport Gate	Airport Food Court
4	Central Bay Street	Coffee Shop	Sandwich Place	Café	Italian Restaurant	Bubble Tea Shop	Salad Place	Burger Joint	Thai Restaurant	Modern European Restaurant	Comic Shop
# set number of clusters
kclusters = 5

toronto_grouped_clustering = toronto_grouped.drop('Neighborhood', 1)

# run k-means clustering
kmeans = KMeans(n_clusters=kclusters, random_state=0).fit(toronto_grouped_clustering)

# check cluster labels generated for each row in the dataframe
kmeans.labels_[0:10]
array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0], dtype=int32)
# add clustering labels
neighborhoods_venues_sorted.insert(0, 'Cluster Labels', kmeans.labels_)

toronto_merged = toronto_data

# merge toronto_grouped with toronto_data to add latitude/longitude for each neighborhood
toronto_merged = toronto_merged.join(neighborhoods_venues_sorted.set_index('Neighborhood'), on='Neighborhood')

toronto_merged.head()
Postalcode	Borough	Neighborhood	Latitude	Longitude	Cluster Labels	1st Most Common Venue	2nd Most Common Venue	3rd Most Common Venue	4th Most Common Venue	5th Most Common Venue	6th Most Common Venue	7th Most Common Venue	8th Most Common Venue	9th Most Common Venue	10th Most Common Venue
37	M4E	East Toronto	The Beaches	43.676357	-79.293031	0	Pub	Health Food Store	Trail	Yoga Studio	Discount Store	Distribution Center	Dog Run	Doner Restaurant	Donut Shop	Eastern European Restaurant
41	M4K	East Toronto	The Danforth West, Riverdale	43.679557	-79.352188	0	Greek Restaurant	Coffee Shop	Italian Restaurant	Furniture / Home Store	Restaurant	Ice Cream Shop	Yoga Studio	Bubble Tea Shop	Bakery	Juice Bar
42	M4L	East Toronto	India Bazaar, The Beaches West	43.668999	-79.315572	0	Park	Fast Food Restaurant	Ice Cream Shop	Pet Store	Coffee Shop	Pub	Movie Theater	Restaurant	Sandwich Place	Brewery
43	M4M	East Toronto	Studio District	43.659526	-79.340923	0	Coffee Shop	Café	Bakery	American Restaurant	Gastropub	Brewery	Yoga Studio	Stationery Store	Fish Market	Latin American Restaurant
44	M4N	Central Toronto	Lawrence Park	43.728020	-79.388790	0	Park	Bus Line	Business Service	Swim School	Yoga Studio	Distribution Center	Falafel Restaurant	Event Space	Ethiopian Restaurant	Escape Room
neighborhoods_venues_sorted.head()
Cluster Labels	Neighborhood	1st Most Common Venue	2nd Most Common Venue	3rd Most Common Venue	4th Most Common Venue	5th Most Common Venue	6th Most Common Venue	7th Most Common Venue	8th Most Common Venue	9th Most Common Venue	10th Most Common Venue
0	0	Berczy Park	Coffee Shop	Bakery	Cocktail Bar	Farmers Market	Beer Bar	Cheese Shop	Seafood Restaurant	Restaurant	Jazz Club	Fish Market
1	0	Brockton, Parkdale Village, Exhibition Place	Café	Coffee Shop	Bakery	Breakfast Spot	Gym	Intersection	Furniture / Home Store	Climbing Gym	Restaurant	Nightclub
2	0	Business reply mail Processing Centre, South C...	Light Rail Station	Yoga Studio	Auto Workshop	Garden Center	Garden	Fast Food Restaurant	Farmers Market	Comic Shop	Pizza Place	Recording Studio
3	0	CN Tower, King and Spadina, Railway Lands, Har...	Airport Service	Airport Lounge	Harbor / Marina	Airport Terminal	Coffee Shop	Boat or Ferry	Sculpture Garden	Plane	Airport Gate	Airport Food Court
4	0	Central Bay Street	Coffee Shop	Sandwich Place	Café	Italian Restaurant	Bubble Tea Shop	Salad Place	Burger Joint	Thai Restaurant	Modern European Restaurant	Comic Shop
address = 'Toronto, CA'

geolocator = Nominatim(user_agent="ny_explorer") location = geolocator.geocode(address) latitude = location.latitude longitude = location.longitude print('The geograpical coordinate of Manhattan are {}, {}.'.format(latitude, longitude))

# create map
map_clusters = folium.Map(location=[43.651070, -79.347015], zoom_start=11)

# set color scheme for the clusters
x = np.arange(kclusters)
ys = [i + x + (i*x)**2 for i in range(kclusters)]
colors_array = cm.rainbow(np.linspace(0, 1, len(ys)))
rainbow = [colors.rgb2hex(i) for i in colors_array]

# add markers to the map
markers_colors = []
for lat, lon, poi, cluster in zip(toronto_merged['Latitude'], toronto_merged['Longitude'], toronto_merged['Neighborhood'], toronto_merged['Cluster Labels']):
    label = folium.Popup(str(poi) + ' Cluster ' + str(cluster), parse_html=True)
    folium.CircleMarker(
        [lat, lon],
        radius=5,
        popup=label,
        color=rainbow[cluster-1],
        fill=True,
        fill_color=rainbow[cluster-1],
        fill_opacity=0.7).add_to(map_clusters)
       
map_clusters
Make this Notebook Trusted to load map: File -> Trust Notebook
pip install folium
Collecting folium
  Downloading folium-0.12.1-py2.py3-none-any.whl (94 kB)
     |████████████████████████████████| 94 kB 5.3 MB/s  eta 0:00:01
Requirement already satisfied: jinja2>=2.9 in /opt/conda/envs/Python-3.7-main/lib/python3.7/site-packages (from folium) (2.11.2)
Requirement already satisfied: requests in /opt/conda/envs/Python-3.7-main/lib/python3.7/site-packages (from folium) (2.24.0)
Requirement already satisfied: numpy in /opt/conda/envs/Python-3.7-main/lib/python3.7/site-packages (from folium) (1.18.5)
Collecting branca>=0.3.0
  Downloading branca-0.4.2-py3-none-any.whl (24 kB)
Requirement already satisfied: MarkupSafe>=0.23 in /opt/conda/envs/Python-3.7-main/lib/python3.7/site-packages (from jinja2>=2.9->folium) (1.1.1)
Requirement already satisfied: urllib3!=1.25.0,!=1.25.1,<1.26,>=1.21.1 in /opt/conda/envs/Python-3.7-main/lib/python3.7/site-packages (from requests->folium) (1.25.9)
Requirement already satisfied: certifi>=2017.4.17 in /opt/conda/envs/Python-3.7-main/lib/python3.7/site-packages (from requests->folium) (2020.12.5)
Requirement already satisfied: idna<3,>=2.5 in /opt/conda/envs/Python-3.7-main/lib/python3.7/site-packages (from requests->folium) (2.9)
Requirement already satisfied: chardet<4,>=3.0.2 in /opt/conda/envs/Python-3.7-main/lib/python3.7/site-packages (from requests->folium) (3.0.4)
Installing collected packages: branca, folium
Successfully installed branca-0.4.2 folium-0.12.1
Note: you may need to restart the kernel to use updated packages.
 
